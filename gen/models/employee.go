// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Employee employee
//
// swagger:model employee
type Employee struct {

	// n i c
	// Example: 15101-8745216-9
	// Required: true
	NIC *string `json:"NIC"`

	// age
	// Example: 23
	// Required: true
	Age *int64 `json:"age"`

	// email
	// Example: 123@wanclouds.net
	// Required: true
	// Pattern: ^[a-zA-Z0-9_\-\.]+[@][wanclouds]{0,9}[\.][net]{3}$
	Email *string `json:"email"`

	// father name
	// Example: Ali Ahmed
	// Required: true
	FatherName *string `json:"father_name"`

	// full name
	// Example: Ahmed Khan
	// Required: true
	FullName *string `json:"full_name"`

	// gender
	// Example: Male
	// Required: true
	Gender *string `json:"gender"`

	// password
	// Required: true
	Password *string `json:"password"`
}

// Validate validates this employee
func (m *Employee) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNIC(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFatherName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGender(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Employee) validateNIC(formats strfmt.Registry) error {

	if err := validate.Required("NIC", "body", m.NIC); err != nil {
		return err
	}

	return nil
}

func (m *Employee) validateAge(formats strfmt.Registry) error {

	if err := validate.Required("age", "body", m.Age); err != nil {
		return err
	}

	return nil
}

func (m *Employee) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	if err := validate.Pattern("email", "body", *m.Email, `^[a-zA-Z0-9_\-\.]+[@][wanclouds]{0,9}[\.][net]{3}$`); err != nil {
		return err
	}

	return nil
}

func (m *Employee) validateFatherName(formats strfmt.Registry) error {

	if err := validate.Required("father_name", "body", m.FatherName); err != nil {
		return err
	}

	return nil
}

func (m *Employee) validateFullName(formats strfmt.Registry) error {

	if err := validate.Required("full_name", "body", m.FullName); err != nil {
		return err
	}

	return nil
}

func (m *Employee) validateGender(formats strfmt.Registry) error {

	if err := validate.Required("gender", "body", m.Gender); err != nil {
		return err
	}

	return nil
}

func (m *Employee) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this employee based on context it is used
func (m *Employee) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Employee) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Employee) UnmarshalBinary(b []byte) error {
	var res Employee
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
